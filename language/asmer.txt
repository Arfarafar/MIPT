PUSH 5
POP bp
JMP main

MeoowD:
PUSH bx

PUSH 1
PUSH bp
ADD
POP dx
PUSH [dx]; push Var



PUSH 1
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


MUL; op mul
PUSH 4; num

PUSH 0
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


MUL; op mul

PUSH 2
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


MUL; op mul
SUB ; op sub
PUSH 3
PUSH bp
ADD
POP bx
POP [bx]
POP bx; get assign



PUSH 3
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


POP ax
RET

END

main:
PUSH 0
PUSH bp
ADD
POP bx
IN [bx]


PUSH 1
PUSH bp
ADD
POP bx
IN [bx]


PUSH 2
PUSH bp
ADD
POP bx
IN [bx]



PUSH 0
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 0; num
JNE ELSE_0_main

PUSH 1
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 0; num
JNE ELSE_1_main

PUSH 2
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 0; num
JNE ELSE_2_main
PUSH 0; num
OUT
PUSH 0; num
OUT
PUSH 0; num
OUT
JMP IFEND_2_main

ELSE_2_main:

IFEND_2_main:

JMP IFEND_1_main

ELSE_1_main:

PUSH bx
PUSH 0; num

PUSH 2
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


SUB ; op sub

PUSH 1
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


DIV; op div
PUSH 3
PUSH bp
ADD
POP bx
POP [bx]
POP bx; get assign



PUSH 3
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


OUT
IFEND_1_main:

JMP IFEND_0_main

ELSE_0_main:

PUSH bx

PUSH 0
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 4
PUSH bp
ADD
POP dx
POP [dx] ; get arg

PUSH 1
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 5
PUSH bp
ADD
POP dx
POP [dx] ; get arg

PUSH 2
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 6
PUSH bp
ADD
POP dx
POP [dx] ; get arg
PUSH bp
PUSH 4
ADD
POP bp; shift bp+

CALL MeoowD

PUSH ax
PUSH bp
PUSH 4
SUB
POP bp; shift bp-

PUSH 4
PUSH bp
ADD
POP bx
POP [bx]
POP bx; get assign



PUSH 4
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 0; num
JNE ELSE_3_main
PUSH bx
PUSH 0; num

PUSH 1
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


SUB ; op sub
PUSH 2; num
DIV; op div

PUSH 0
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


DIV; op div
PUSH 3
PUSH bp
ADD
POP bx
POP [bx]
POP bx; get assign



PUSH 3
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


OUT
JMP IFEND_3_main

ELSE_3_main:

IFEND_3_main:


PUSH 4
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 0; num
JBE ELSE_4_main
PUSH bx
PUSH 0; num

PUSH 1
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


SUB ; op sub

PUSH 4
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 0.500; num
POW
ADD; op add
PUSH 2; num
DIV; op div

PUSH 0
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


DIV; op div
PUSH 3
PUSH bp
ADD
POP bx
POP [bx]
POP bx; get assign



PUSH 3
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


OUT
PUSH bx
PUSH 0; num

PUSH 1
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


SUB ; op sub

PUSH 4
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


PUSH 0.500; num
POW
SUB ; op sub
PUSH 2; num
DIV; op div

PUSH 0
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


DIV; op div
PUSH 3
PUSH bp
ADD
POP bx
POP [bx]
POP bx; get assign



PUSH 3
PUSH bp
ADD
POP dx
PUSH [dx]; push Var


OUT
JMP IFEND_4_main

ELSE_4_main:

IFEND_4_main:

IFEND_0_main:

END



